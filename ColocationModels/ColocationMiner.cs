using System;
using System.Collections.Generic;
using System.IO;

namespace ColocationModels
{
    public class ColocationMiner
    {
        #region Property
        private Dictionary<int, ColocationPatternGroup> _patternGroups = new Dictionary<int, ColocationPatternGroup>();
        public Dictionary<int, ColocationPatternGroup> PatternGroups
        {
            get { return _patternGroups; }
        }
        #endregion
        #region Constructor
        public ColocationMiner()
        {
        }
        public ColocationMiner(PointGrid m_basePointGrid,
                               double m_piThreshold)
        {
            // get a group of patterns composed of two event types
            var binaryPatternGroup = new ColocationPatternGroup(m_basePointGrid, m_piThreshold);
			if (binaryPatternGroup.Patterns.Count > 0)
			{
				PatternGroups.Add(2, binaryPatternGroup);
			}

			if (binaryPatternGroup.Patterns.Count < 2)
			{
				// if the number of patterns is less than 2,
				// no more complex patterns can be generated by joining them.
				return;
			}

            int typeNumber = 3;
            while (true)
            {
                // get a group of patterns composed of one more event types
                var patternGroup = new ColocationPatternGroup(m_basePointGrid,
                                                              m_piThreshold,
                                                              PatternGroups[typeNumber - 1]);
                if (patternGroup.Patterns.Count > 0)
                {
                    PatternGroups.Add(typeNumber, patternGroup);
                    typeNumber++;
                }

                if (patternGroup.Patterns.Count < 2)
                {
                    // if the number of patterns is less than 2,
                    // no more complex patterns can be generated by joining them.
                    break;
                }
            }
        }
        #endregion
        #region Method
        public void WriteToFile(string m_fileName, string[] m_args, string m_timerStr)
        {
            using (StreamWriter writer = new StreamWriter(m_fileName))
            {
                writer.WriteLine(string.Join(" ", m_args));
                writer.WriteLine(string.Format("\n{0}", m_timerStr));
                foreach (var groupKey in PatternGroups.Keys)
                {
                    writer.WriteLine(groupKey);
                    foreach (var pattern in PatternGroups[groupKey].Patterns.Values)
                    {
                        writer.Write(pattern.ToString());
                    }
                    writer.Write("\n*********************************************************************************\n\n\n");
                }
            }
        }
        #endregion
    }
}
